# Resources:
#   CloudWatchKMSKey:
#     Type: "AWS::KMS::Key"
#     Properties:
#       KeyPolicy:
#         Version: 2012-10-17
#         Id: key-policy-id
#         Statement:
#           - Sid: Enable IAM User Permissions
#             Effect: Allow
#             Principal:
#               AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
#             Action: "kms:*"
#             Resource: "*"
#           - Sid: Allow Lambda logging
#             Effect: Allow
#             Principal:
#               Service: !Sub "logs.${AWS::Region}.amazonaws.com"
#             Action:
#               - kms:Encrypt*
#               - kms:Decrypt*
#               - kms:ReEncrypt*
#               - kms:GenerateDataKey*
#               - kms:Describe*
#             Resource: "*"
#             Condition:
#               ArnEquals:
#                 kms:EncryptionContext:aws:logs:arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
#           - Sid: Allow Firehose Logging
#             Effect: Allow
#             Principal:
#               Service: !Sub "logs.${AWS::Region}.amazonaws.com"
#             Action:
#               - kms:Encrypt*
#               - kms:Decrypt*
#               - kms:ReEncrypt*
#               - kms:GenerateDataKey*
#               - kms:Describe*
#             Resource: "*"
#             Condition:
#               ArnEquals:
#                 kms:EncryptionContext:aws:logs:arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*"

#   CloudWatchKMSKeyAlias:
#     Type: "AWS::KMS::Alias"
#     Properties:
#       AliasName: !Sub "alias/${AWS::StackName}-CloudWatchKMSAlias"
#       TargetKeyId: !Ref CloudWatchKMSKey

#   SplunkSubscriptionFilterRole:
#     Type: "AWS::IAM::Role"
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: "logs.amazonaws.com"
#             Action: "sts:AssumeRole"

#   SplunkSubscriptionFilterDeliveryStreamPolicy:
#     Condition: ShouldUseSplunk
#     Type: "AWS::IAM::Policy"
#     Properties:
#       PolicyName: "allow-put-data-stream-records"
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - firehose:PutRecord
#             Resource:
#               - !GetAtt SplunkDeliveryStream.Arn
#       Roles:
#         - !Ref SplunkSubscriptionFilterRole

#   SplunkSubscriptionFilterKMSPolicy:
#     Type: "AWS::IAM::Policy"
#     Properties:
#       PolicyName: "allow-kms-generate-data-key"
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - kms:GenerateDataKey
#             Resource:
#               - !GetAtt CloudWatchKMSKey.Arn
#       Roles:
#         - !Ref SplunkSubscriptionFilterRole

#   SplunkDeliveryStream:
#     Condition: ShouldUseSplunk
#     # Depends on policy as delivery streams require a role with correct policies to be build, and a role reference doesn't provide a dependency as Stream -> Role <- Policy, so Stream -!> Policy
#     DependsOn:
#       - SplunkDeliveryStreamProcessorInvokePolicy
#     Type: AWS::KinesisFirehose::DeliveryStream
#     Properties:
#       DeliveryStreamType: DirectPut
#       SplunkDestinationConfiguration:
#         HECEndpoint: !Ref SplunkHECEndpoint
#         HECEndpointType: "Event"
#         HECToken: !Ref SplunkHECToken
#         ProcessingConfiguration:
#           Enabled: true
#           Processors:
#             - Type: Lambda
#               Parameters:
#                 - ParameterName: LambdaArn
#                   ParameterValue: !GetAtt SplunkDeliveryStreamProcessor.Arn
#                 - ParameterName: RoleArn
#                   ParameterValue: !GetAtt SplunkDeliveryStreamProcessorInvokeRole.Arn
#         S3Configuration:
#           BucketARN: !ImportValue account-resources:SplunkDeliveryStreamBackupBucket
#           RoleARN: !ImportValue account-resources:SplunkDeliveryStreamBackupBucketRoleArn
#           Prefix: !Ref "AWS::StackName"
#           EncryptionConfiguration:
#             KMSEncryptionConfig:
#               AWSKMSKeyARN: !ImportValue account-resources:SplunkDeliveryStreamBackupKMSKey
#         CloudWatchLoggingOptions:
#           Enabled: true
#           LogGroupName: !Ref SplunkDeliveryStreamLogGroup
#           LogStreamName: !Ref SplunkDeliveryStreamLogStream

#   SplunkDeliveryStreamLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/kinesisfirehose/${AWS::StackName}-SplunkDeliveryStream"
#       RetentionInDays: !Ref LogRetentionDays
#       KmsKeyId: !GetAtt CloudWatchKMSKey.Arn

#   SplunkDeliveryStreamLogStream:
#     Type: AWS::Logs::LogStream
#     Properties:
#       LogGroupName: !Ref SplunkDeliveryStreamLogGroup

#   SplunkDeliveryStreamLoggingPolicy:
#     Type: "AWS::IAM::Policy"
#     Properties:
#       PolicyName: "allow-lambda-logging"
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - logs:CreateLogStream
#               - logs:PutLogEvents
#             Resource:
#               - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamLogGroup}"
#               - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamLogGroup}:log-stream:*"
#       Roles:
#         - !ImportValue account-resources:SplunkDeliveryStreamBackupBucketRole

#   SplunkDeliveryStreamKMSPolicy:
#     Type: "AWS::IAM::Policy"
#     Properties:
#       PolicyName: "allow-KMS-access"
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - kms:DescribeKey
#               - kms:GenerateDataKey*
#               - kms:Encrypt
#               - kms:ReEncrypt*
#             Resource:
#               - !GetAtt CloudWatchKMSKey.Arn
#       Roles:
#         - !ImportValue account-resources:SplunkDeliveryStreamBackupBucketRole

#   SplunkDeliveryStreamProcessor:
#     Type: "AWS::Lambda::Function"
#     Properties:
#       Architectures:
#         - x86_64
#       Code:
#         ZipFile:
#       Environment:
#         Variables:
#           NODE_OPTIONS: --enable-source-maps
#           LOG_LEVEL: !Ref LogLevel
#           ENV: !Ref Env
#       Handler: splunkProcessor.handler
#       MemorySize: 512
#       Role: !GetAtt SplunkDeliveryStreamProcessorRole.Arn
#       Runtime: nodejs18.x
#       Timeout: 60

#   SplunkDeliveryStreamProcessorRole:
#     Type: "AWS::IAM::Role"
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: "lambda.amazonaws.com"
#             Action: "sts:AssumeRole"

#   SplunkDeliveryStreamProcessorLambdaPolicy:
#     Type: "AWS::IAM::Policy"
#     Properties:
#       PolicyName: "allow-lambda-logging"
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - logs:CreateLogStream
#               - logs:PutLogEvents
#             Resource:
#               - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamProcessorLogGroup}"
#               - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamProcessorLogGroup}:log-stream:*"
#       Roles:
#         - !Ref SplunkDeliveryStreamProcessorRole

#   SplunkDeliveryStreamProcessorKMSPolicy:
#     Type: "AWS::IAM::Policy"
#     Properties:
#       PolicyName: "allow-KMS-access"
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - kms:DescribeKey
#               - kms:GenerateDataKey*
#               - kms:Encrypt
#               - kms:ReEncrypt*
#             Resource:
#               - !GetAtt CloudWatchKMSKey.Arn
#       Roles:
#         - !Ref SplunkDeliveryStreamProcessorRole

#   SplunkDeliveryStreamProcessorLogGroup:
#     Type: "AWS::Logs::LogGroup"
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/${SplunkDeliveryStreamProcessor}"
#       RetentionInDays: !Ref LogRetentionDays
#       KmsKeyId: !GetAtt CloudWatchKMSKey.Arn

#   SplunkDeliveryStreamProcessorInvokeRole:
#     Type: "AWS::IAM::Role"
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: "firehose.amazonaws.com"
#             Action: "sts:AssumeRole"

#   SplunkDeliveryStreamProcessorInvokePolicy:
#     Type: AWS::IAM::Policy
#     Properties:
#       PolicyName: "allow-delivery-stream-invoke-processor"
#       PolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Action:
#               - lambda:InvokeFunction
#             Resource:
#               - !GetAtt SplunkDeliveryStreamProcessor.Arn
#       Roles:
#         - !Ref SplunkDeliveryStreamProcessorInvokeRole
