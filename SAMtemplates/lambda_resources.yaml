AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  splunk firehose transform

Globals:
  Function:
    Timeout: 60
    MemorySize: 256
    Architectures:
      - x86_64
    Runtime: nodejs20.x
    Environment:
      Variables:
        NODE_OPTIONS: "--enable-source-maps"
        ENV: !Ref Env

Parameters:
  SplunkHECEndpoint:
    Type: String
    Description: HEC Endpoint for Cloudformation to Splunk Firehose
    Default: none
  LogRetentionDays:
    Type: Number
    Description: How long to keep logs for
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1096,
        1827,
        2192,
        2557,
        2922,
        3288,
        3653,
      ]
  LogLevel:
    Type: String
    Description: The log level to set in the lambda
    Default: "INFO"
  Env:
    Type: String
    Description: The environment the lambda is deployed to
    Default: "dev"
  LambdaInsightsLogGroupName:
    Type: String
    Description: The log level to set in the lambda

Resources:
  ##################################################
  #region Lambda Insights
  ##################################################
  LambdaInsightsCloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
        - CW_LOGGROUP_RETENTION_PERIOD_CHECK    
    Properties:
      LogGroupName: !Ref LambdaInsightsLogGroupName
      RetentionInDays: !Ref LogRetentionDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  LambdaInsightsLogGroupPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt LambdaInsightsCloudwatchLogGroup.Arn
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
  #endregion

  ##################################################
  #region Splunk Subscription Filter
  ##################################################
  SplunkSubscriptionFilterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - sts:AssumeRole

  SplunkSubscriptionFilterDeliveryStreamManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref SplunkSubscriptionFilterRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - firehose:PutRecord
            Resource:
              - !GetAtt SplunkDeliveryStream.Arn

  SplunkSubscriptionFilterKMSManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref SplunkSubscriptionFilterRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
            Resource:
              - !ImportValue account-resources:CloudwatchLogsKmsKeyArn
  #endregion

  ##################################################
  #region Splunk Delivery Stream
  ##################################################
  SplunkDeliveryStream:
    # Depends on policy as delivery streams require a role with correct policies to be build, and a role reference doesn't provide a dependency as Stream -> Role <- Policy, so Stream -!> Policy
    DependsOn:
      - SplunkDeliveryStreamProcessorInvokeManagedPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      SplunkDestinationConfiguration:
        HECEndpoint: !Ref SplunkHECEndpoint
        HECEndpointType: "Event"
        HECToken: "{{resolve:secretsmanager:account-resources-SplunkHECToken:SecretString}}"
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt SplunkDeliveryStreamProcessor.Arn
                - ParameterName: RoleArn
                  ParameterValue: !GetAtt SplunkDeliveryStreamProcessorInvokeRole.Arn
        S3Configuration:
          BucketARN: !ImportValue account-resources:SplunkDeliveryStreamBackupBucket
          RoleARN: !ImportValue account-resources:SplunkDeliveryStreamBackupBucketRoleArn
          Prefix: !Ref "AWS::StackName"
          EncryptionConfiguration:
            KMSEncryptionConfig:
              AWSKMSKeyARN: !ImportValue account-resources:SplunkDeliveryStreamBackupKMSKey
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref SplunkDeliveryStreamLogGroup
          LogStreamName: !Ref SplunkDeliveryStreamLogStream

  SplunkDeliveryStreamLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
        - CW_LOGGROUP_RETENTION_PERIOD_CHECK    
    Properties:
      LogGroupName: !Sub "/aws/kinesisfirehose/${AWS::StackName}-SplunkDeliveryStream"
      RetentionInDays: !Ref LogRetentionDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  SplunkDeliveryStreamLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref SplunkDeliveryStreamLogGroup

  SplunkDeliveryStreamLoggingManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue account-resources:SplunkDeliveryStreamBackupBucketRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamLogGroup}:log-stream:*"
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource:
              - !ImportValue account-resources:CloudwatchLogsKmsKeyArn
  #endregion

  ##################################################
  #region Splunk Delivery Stream Processor
  ##################################################
  SplunkDeliveryStreamProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../packages/
      Handler: splunkProcessor.handler
      Role: !GetAtt SplunkDeliveryStreamProcessorRole.Arn
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        packages: bundle
        EntryPoints:
          - splunkProcessor/src/splunkProcessor.js

  SplunkDeliveryStreamProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  SplunkDeliveryStreamProcessorLambdaManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref SplunkDeliveryStreamProcessorRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamProcessorLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SplunkDeliveryStreamProcessorLogGroup}:log-stream:*"

  SplunkDeliveryStreamProcessorKMSManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref SplunkDeliveryStreamProcessorRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource:
              - !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  SplunkDeliveryStreamProcessorDeliveryStreamManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref SplunkDeliveryStreamProcessorRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - firehose:PutRecordBatch
            Resource:
              - !GetAtt SplunkDeliveryStream.Arn

  SplunkDeliveryStreamProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
        - CW_LOGGROUP_RETENTION_PERIOD_CHECK    
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SplunkDeliveryStreamProcessor}"
      RetentionInDays: !Ref LogRetentionDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
  #endregion

  ##################################################
  #region Splunk Delivery Stream Processor Invoke
  ##################################################
  SplunkDeliveryStreamProcessorInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action:
              - sts:AssumeRole

  SplunkDeliveryStreamProcessorInvokeManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref SplunkDeliveryStreamProcessorInvokeRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt SplunkDeliveryStreamProcessor.Arn
  #endregion

  ##################################################
  #region Certificate Checker
  ##################################################
  LambdaManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !GetAtt ExpiryFunctionResources.Outputs.LambdaRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !ImportValue account-resources:ClinicalTrackerCACertSecret
              - !ImportValue account-resources:ClinicalTrackerClientCertSecret
              - !ImportValue account-resources:ClinicalTrackerClientSandboxCertSecret
              - !ImportValue account-resources:PfpCACertSecret
              - !ImportValue account-resources:PfpClientCertSecret
              - !ImportValue account-resources:PfpClientSandboxCertSecret
              - !ImportValue account-resources:PsuCACertSecret
              - !ImportValue account-resources:PsuClientCertSecret
              - !ImportValue account-resources:PsuClientSandboxCertSecret
              - !ImportValue account-resources:FhirFacadeCACertSecret
              - !ImportValue account-resources:FhirFacadeClientCertSecret
              - !ImportValue account-resources:FhirFacadeClientSandboxCertSecret
              - !ImportValue account-resources:SpinePublicCertificate
          - Effect: Allow
            Action:
              - secretsmanager:BatchGetSecretValue
            Resource: "*"

  ExpiryFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-CertificateChecker"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  CertExpiryCheckFunctionScheduleEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CertExpiryCheckFunctionScheduleEventRolePolicy

  CertExpiryCheckFunctionScheduleEventRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt CertExpiryCheckFunction.Arn

  CertExpiryCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-CertificateChecker"
      CodeUri: ../packages/
      Handler: certificateChecker.handler
      Role: !GetAtt ExpiryFunctionResources.Outputs.LambdaRoleArn
      Events:
        ScheduleEvent:
          Type: ScheduleV2
          Properties:
            Name: !Sub ${AWS::StackName}-CertExpirySchedule
            ScheduleExpression: "rate(1 day)"
            RoleArn: !GetAtt CertExpiryCheckFunctionScheduleEventRole.Arn
            Input: !Sub
              - "{\"secretARNs\": [ \
                \"${ClinicalTrackerCACertSecret}\", \
                \"${ClinicalTrackerClientCertSecret}\", \
                \"${ClinicalTrackerClientSandboxCertSecret}\", \
                \"${PfpCACertSecret}\", \
                \"${PfpClientCertSecret}\", \
                \"${PfpClientSandboxCertSecret}\", \
                \"${PsuCACertSecret}\", \
                \"${PsuClientCertSecret}\", \
                \"${PsuClientSandboxCertSecret}\", \
                \"${FhirFacadeCACertSecret}\", \
                \"${FhirFacadeClientCertSecret}\", \
                \"${FhirFacadeClientSandboxCertSecret}\", \
                \"${SpinePublicCertificate}\" ]}"
              - ClinicalTrackerCACertSecret: !ImportValue account-resources:ClinicalTrackerCACertSecret
                ClinicalTrackerClientCertSecret: !ImportValue account-resources:ClinicalTrackerClientCertSecret
                ClinicalTrackerClientSandboxCertSecret: !ImportValue account-resources:ClinicalTrackerClientSandboxCertSecret
                PfpCACertSecret: !ImportValue account-resources:PfpCACertSecret
                PfpClientCertSecret: !ImportValue account-resources:PfpClientCertSecret
                PfpClientSandboxCertSecret: !ImportValue account-resources:PfpClientSandboxCertSecret
                PsuCACertSecret: !ImportValue account-resources:PsuCACertSecret
                PsuClientCertSecret: !ImportValue account-resources:PsuClientCertSecret
                PsuClientSandboxCertSecret: !ImportValue account-resources:PsuClientSandboxCertSecret
                FhirFacadeCACertSecret: !ImportValue account-resources:FhirFacadeCACertSecret
                FhirFacadeClientCertSecret: !ImportValue account-resources:FhirFacadeClientCertSecret
                FhirFacadeClientSandboxCertSecret: !ImportValue account-resources:FhirFacadeClientSandboxCertSecret
                SpinePublicCertificate: !ImportValue account-resources:SpinePublicCertificate
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: certificateChecker/tsconfig.json
        packages: bundle
        EntryPoints:
          - certificateChecker/src/certificateChecker.ts
  #endregion

  ##################################################
  #region Slack Alerter
  ###################################################
  SlackAlertsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-SlackAlerts
      KmsMasterKeyId: !ImportValue account-resources:SnsKMSKey
      DeliveryStatusLogging:
        - Protocol: sqs
          SuccessFeedbackRoleArn: !ImportValue account-resources:SNSFeedbackLoggingRoleArn
          FailureFeedbackRoleArn: !ImportValue account-resources:SNSFeedbackLoggingRoleArn

  # todo add deliver status logging

  SlackAlerterSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-SlackAlerts
      KmsMasterKeyId: !ImportValue account-resources:SqsKMSKey
      MessageRetentionPeriod: 86400 # 1day in secs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SlackAlerterDeadLetterQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 60
  
  SlackAlerterSqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !GetAtt SlackAlerterSqsQueue.QueueUrl
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource: !GetAtt SlackAlerterSqsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt SlackAlertsSnsTopic.TopicArn

  SlackAlerterDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-SlackAlertsDeadLetter
      KmsMasterKeyId: !ImportValue account-resources:SqsKMSKey
      MessageRetentionPeriod: 604800 # 1week in secs
      VisibilityTimeout: 60
  
  SlackAlerterDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !GetAtt SlackAlerterDeadLetterQueue.QueueUrl
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: sqs.amazonaws.com
            Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Resource: !GetAtt SlackAlerterDeadLetterQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt SlackAlerterSqsQueue.Arn

  SlackAlerterSqsQueueSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !GetAtt SlackAlertsSnsTopic.TopicArn
      RawMessageDelivery: true
      Protocol: sqs
      Endpoint: !GetAtt SlackAlerterSqsQueue.Arn

  ReadSlackAlerterSqsQueuePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ListQueues
            Resource: !GetAtt  SlackAlerterSqsQueue.Arn
  
  SlackAlerterResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-SlackAlerter"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true
        IncludeAdditionalPolicies: true
        AdditionalPolicies: !Join
          - ","
          - - !ImportValue account-resources:SqsDecryptSecretsKMSPolicy
            - !ImportValue account-resources:AccessSlackSecretsManagedPolicy
            - !GetAtt ReadSlackAlerterSqsQueuePolicy.PolicyArn

  SlackAlerter:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SlackAlerter
      CodeUri: ../packages
      Handler: slackAlerter.handler
      Role: !GetAtt SlackAlerterResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          PARAMETERS_SECRETS_EXTENSION_HTTP_PORT: 2773
      Layers:
        - arn:aws:lambda:eu-west-2:133256977650:layer:AWS-Parameters-and-Secrets-Lambda-Extension:11
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SlackAlerterSqsQueue.Arn
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
            BatchSize: 10
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        tsconfig: slackAlerter/tsconfig.json
        packages: bundle
        EntryPoints:
          - slackAlerter/src/slackAlerter.ts
  #endregion

  ##################################################
  #region Lambda Janitor
  ##################################################
  LambdaJanitor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-LambdaJanitor
      CodeUri: ../packages
      Handler: janitor.handler
      Role: !GetAtt LambdaJanitorResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          FUNCTION_ARN: !ImportValue fhir-validator:FHIRValidatorUKCoreLambdaArn
          VERSIONS_TO_KEEP: 3
      Events:
        # schedule periodic cron job
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        tsconfig: lambdaJanitor/tsconfig.json
        packages: bundle
        EntryPoints:
          - lambdaJanitor/src/janitor.ts

  LambdaJanitorResources:
    Type: AWS::Serverless::Application
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-LambdaJanitor"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true
        IncludeAdditionalPolicies: false
        # AdditionalPolicies: enable viewing and deleting of lambda functions
  #endregion

  ##################################################
  #region Proxygen lambdas
  ##################################################
  ExecuteProxygenPTLManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue ci-resources:ProxygenPTLRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt ProxygenPTLInstancePutFunction.Arn
              - !GetAtt ProxygenPTLMTLSSecretPutFunction.Arn
              - !GetAtt ProxygenPTLSpecPublishFunction.Arn
              - !GetAtt ProxygenPTLInstanceGetFunction.Arn
              - !GetAtt ProxygenPTLInstanceDeleteFunction.Arn

  ExecuteProxygenProdManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue ci-resources:ProxygenProdRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt ProxygenProdInstancePutFunction.Arn
              - !GetAtt ProxygenProdMTLSSecretPutFunction.Arn
              - !GetAtt ProxygenProdSpecPublishFunction.Arn

  ProxygenManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !GetAtt ProxygenPTLInstancePutFunctionResources.Outputs.LambdaRoleName
        - !GetAtt ProxygenProdInstancePutFunctionResources.Outputs.LambdaRoleName
        - !GetAtt ProxygenPTLMTLSSecretPutFunctionResources.Outputs.LambdaRoleName
        - !GetAtt ProxygenProdMTLSSecretPutFunctionResources.Outputs.LambdaRoleName
        - !GetAtt ProxygenPTLSpecPublishFunctionResources.Outputs.LambdaRoleName
        - !GetAtt ProxygenProdSpecPublishFunctionResources.Outputs.LambdaRoleName
        - !GetAtt ProxygenPTLInstanceGetFunctionResources.Outputs.LambdaRoleName
        - !GetAtt ProxygenPTLInstanceDeleteFunctionResources.Outputs.LambdaRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !ImportValue account-resources:PSUProxygenPrivateKey
              - !ImportValue account-resources:CPSUProxygenPrivateKey

  ProxygenPTLInstancePutFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenPTLInstancePut"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenPTLInstancePutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenPTLInstancePut"
      CodeUri: ../packages/
      Handler: proxygenInstancePut.handler
      Timeout: 600
      Role: !GetAtt ProxygenPTLInstancePutFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: internal-dev,internal-dev-sandbox,internal-qa,ref
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenInstancePut.ts

  ProxygenProdInstancePutFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenProdInstancePut"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenProdInstancePutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenProdInstancePut"
      CodeUri: ../packages/
      Handler: proxygenInstancePut.handler
      Timeout: 600
      Role: !GetAtt ProxygenProdInstancePutFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: int,sandbox,prod
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenInstancePut.ts

  ProxygenPTLMTLSSecretPutFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenPTLMTLSSecretPut"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenPTLMTLSSecretPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenPTLMTLSSecretPut"
      CodeUri: ../packages/
      Handler: proxygenMTLSSecretPut.handler
      Timeout: 600
      Role: !GetAtt ProxygenPTLMTLSSecretPutFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: internal-dev,internal-dev-sandbox,internal-qa,ref
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenMTLSSecretPut.ts

  ProxygenProdMTLSSecretPutFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenProdMTLSSecretPut"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenProdMTLSSecretPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenProdMTLSSecretPut"
      CodeUri: ../packages/
      Handler: proxygenMTLSSecretPut.handler
      Timeout: 600
      Role: !GetAtt ProxygenProdMTLSSecretPutFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: int,sandbox,prod
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenMTLSSecretPut.ts

  ProxygenPTLSpecPublishFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenPTLSpecPublish"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenPTLSpecPublishFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenPTLSpecPublish"
      CodeUri: ../packages/
      Handler: proxygenSpecPublish.handler
      Timeout: 600
      Role: !GetAtt ProxygenPTLSpecPublishFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: uat
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenSpecPublish.ts

  ProxygenProdSpecPublishFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenProdSpecPublish"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenProdSpecPublishFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenProdSpecPublish"
      CodeUri: ../packages/
      Handler: proxygenSpecPublish.handler
      Timeout: 600
      Role: !GetAtt ProxygenProdSpecPublishFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: prod
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenSpecPublish.ts

  ProxygenPTLInstanceGetFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenPTLInstanceGet"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenPTLInstanceGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenPTLInstanceGet"
      CodeUri: ../packages/
      Handler: proxygenInstanceGet.handler
      Timeout: 600
      Role: !GetAtt ProxygenPTLInstanceGetFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: internal-dev,internal-dev-sandbox
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenInstanceGet.ts

  ProxygenPTLInstanceDeleteFunctionResources:
    Type: AWS::Serverless::Application
    DependsOn:
      - SplunkSubscriptionFilterDeliveryStreamManagedPolicy
    Properties:
      Location: common_lambda_resources.yml
      Parameters:
        CloudWatchKMSKey: !ImportValue account-resources:CloudwatchLogsKmsKeyArn
        SplunkSubscriptionFilterRole: !GetAtt SplunkSubscriptionFilterRole.Arn
        SplunkDeliveryStream: !GetAtt SplunkDeliveryStream.Arn
        LambdaName: !Sub "${AWS::StackName}-ProxygenPTLInstanceDelete"
        LogRetentionDays: !Ref LogRetentionDays
        EnableSplunk: true

  ProxygenPTLInstanceDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ProxygenPTLInstanceDelete"
      CodeUri: ../packages/
      Handler: proxygenInstanceDelete.handler
      Timeout: 600
      Role: !GetAtt ProxygenPTLInstanceDeleteFunctionResources.Outputs.LambdaRoleArn
      Environment:
        Variables:
          ALLOWED_ENVIRONMENTS: internal-dev,internal-dev-sandbox
    Metadata:
      BuildMethod: esbuild
      guard:
        SuppressedRules:
        - LAMBDA_DLQ_CHECK
        - LAMBDA_INSIDE_VPC
        - LAMBDA_CONCURRENCY_CHECK
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        tsconfig: proxygen/tsconfig.json
        packages: bundle
        EntryPoints:
          - proxygen/src/proxygenInstanceDelete.ts
  #endregion

#region outputs
Outputs:
  #################################################
  # Lambda Insights Outputs
  #################################################
  LambdaInsightsLogGroupPolicy:
    Description: "Lambda Insights Policy ARN"
    Value: !GetAtt LambdaInsightsLogGroupPolicy.PolicyArn
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "LambdaInsightsLogGroupPolicy"]]

  ##################################################
  # Splunk Subscription Filter Outputs
  ##################################################
  SplunkSubscriptionFilterRole:
    Description: "SplunkSubscriptionFilterRole ARN"
    Value: !GetAtt SplunkSubscriptionFilterRole.Arn
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "SplunkSubscriptionFilterRole"]]

  ##################################################
  # Splunk Delivery Stream Outputs
  ##################################################
  SplunkDeliveryStream:
    Description: "SplunkDeliveryStream ARN"
    Value: !GetAtt SplunkDeliveryStream.Arn
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "SplunkDeliveryStream"]]
#endregion
