name: "Create confluence release notes"
description: "Do release note actions in confluence and jira"
inputs:
  TARGET_ENVIRONMENT:
    required: true
    description: "Target Environment"
  RELEASE_TAG:
    required: false
    description: "The tag we are releasing - only used for create_rc_release_notes"
  CREATE_RC_RELEASE_NOTES:
    required: true
    description: "whether to create rc release notes page instead of normal release notes"
    default: "false"
  DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE:
    required: true
    description: "The role to assume to execute the release notes lambda"
  DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE:
    required: true
    description: "The dev cloud formation deploy role"
  TARGET_CLOUD_FORMATION_CHECK_VERSION_ROLE:
    required: true
    description: "The target cloud formation deploy role"

runs:
  using: "composite"
  steps:
    - name: connect to target account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.TARGET_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
        role-session-name: account-resources-release-notes-target
        unset-current-credentials: true

    - name: Get deployed tags on target
      shell: bash
      working-directory: .github/scripts
      run: ./get_target_deployed_tag.sh

    - name: connect to dev account to get tags
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE }}
        role-session-name: account-resources-release-notes-dev
        unset-current-credentials: true

    - name: get current dev tag
      shell: bash
      working-directory: .github/scripts
      run: ./get_current_dev_tag.sh

    - name: connect to dev account to run release notes lambda
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        role-to-assume: ${{ inputs.DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE }}
        role-session-name: account-resources-release-notes-run-lambda
        unset-current-credentials: true

    - name: create int release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'int' && inputs.CREATE_RC_RELEASE_NOTES == 'false'
      run: |
        # create int release notes
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$dev_tag", 
            "repoName": "electronic-prescription-service-account-resources", 
            "targetEnvironment": "INT", 
            "productName": "AWS account resources layer", 
            "releaseNotesPageId": "749733665", 
            "releaseNotesPageTitle": "Current AWS account resources release notes - INT"
        }
        EOF
        cat payload.json
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          function_arn=$(aws cloudformation list-exports --query "Exports[?Name=='release-notes:CreateReleaseNotesLambdaArn'].Value" --output text)
          aws lambda invoke --function-name "${function_arn}" \
          --cli-binary-format raw-in-base64-out \
          --payload file://payload.json out.txt
        fi

    - name: create int rc release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'int' && inputs.CREATE_RC_RELEASE_NOTES == 'true'
      run: |
        # create int rc release notes
        release_tag="${{ inputs.RELEASE_TAG }}"
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$release_tag", 
            "repoName": "electronic-prescription-service-account-resources", 
            "targetEnvironment": "INT", 
            "productName": "AWS account resources layer", 
            "releaseNotesPageId": "749733675", 
            "releaseNotesPageTitle": "AWS-account-resources-$release_tag - Deployed to [INT] on $(date +'%d-%m-%y')",
            "createReleaseCandidate": "true",
            "releasePrefix": "AWS-account-resources-"
        }
        EOF
        cat payload.json
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          function_arn=$(aws cloudformation list-exports --query "Exports[?Name=='release-notes:CreateReleaseNotesLambdaArn'].Value" --output text)
          aws lambda invoke --function-name "${function_arn}" \
          --cli-binary-format raw-in-base64-out \
          --payload file://payload.json out.txt
        fi

    - name: create prod release notes
      shell: bash
      if: inputs.TARGET_ENVIRONMENT == 'prod'
      run: |
        # create prod release notes
        cat <<EOF > payload.json
        { 
            "currentTag": "$current_deployed_tag", 
            "targetTag": "$dev_tag", 
            "repoName": "electronic-prescription-service-account-resources", 
            "targetEnvironment": "PROD", 
            "productName": "AWS account resources layer", 
            "releaseNotesPageId": "749733670", 
            "releaseNotesPageTitle": "Current AWS account resources release notes - PROD"
        }
        EOF
        cat payload.json
        if [ "${{ inputs.DRY_RUN}}" != "true" ]; then
          function_arn=$(aws cloudformation list-exports --query "Exports[?Name=='release-notes:CreateReleaseNotesLambdaArn'].Value" --output text)
          aws lambda invoke --function-name "${function_arn}" \
            --cli-binary-format raw-in-base64-out \
            --payload file://payload.json out.txt
        fi
