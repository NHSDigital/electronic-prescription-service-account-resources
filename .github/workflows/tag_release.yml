name: Tag Release

on:
  workflow_call:
    inputs:
      dry_run:
        description: 'Whether to run in dry-run mode (true) or create actual tags (false)'
        required: true
        type: boolean
      branch_name:
        description: 'The branch name to base the release on'
        required: true
        type: string
    outputs:
      version_tag:
        description: 'The version tag that was created or would be created'
        value: ${{ jobs.tag_release.outputs.version_tag }}
      change_set_version:
        description: 'The change set version for deployments'
        value: ${{ jobs.tag_release.outputs.change_set_version }}

jobs:
  tag_release:
    runs-on: ubuntu-22.04
    outputs:
      version_tag: ${{ steps.output_version_tag.outputs.VERSION_TAG }}
      change_set_version: ${{ steps.output_change_set_version.outputs.CHANGE_SET_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch_name }}
          fetch-depth: 0

      - name: Get asdf version
        id: asdf-version
        run: echo "version=$(awk '!/^#/ && NF {print $1; exit}' .tool-versions.asdf)" >> "$GITHUB_OUTPUT"

      - name: Install asdf
        uses: asdf-vm/actions/setup@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_version: ${{ steps.asdf-version.outputs.version }}

      - name: Cache asdf
        uses: actions/cache@v4
        with:
          path: |
            ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf dependencies in .tool-versions
        uses: asdf-vm/actions/install@1902764435ca0dd2f3388eea723a4f92a4eb8302
        with:
          asdf_version: ${{ steps.asdf-version.outputs.version }}
        env:
          PYTHON_CONFIGURE_OPTS: --enable-shared

      - name: Install Dependencies
        run: make install

      - name: Set VERSION_TAG based on dry_run flag
        id: output_version_tag
        run: |
          # Determine semantic-release command based on branch
          if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
            echo "on main branch"
            SEMANTIC_RELEASE_CMD="npx semantic-release --dry-run"
          else
            # For non-main branches, override the branches configuration
            echo "overriding branches for semantic-release to ${{ inputs.branch_name }}"
            SEMANTIC_RELEASE_CMD="npx semantic-release --dry-run --branches ${{ inputs.branch_name }} --no-ci"
          fi
          
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            # Dry run mode: use short git SHA and get next version for summary
            VERSION_TAG=$(git rev-parse --short HEAD)
            # Set the branch explicitly before running semantic-release
            export GIT_BRANCH="${{ inputs.branch_name }}"
            $SEMANTIC_RELEASE_CMD > semantic-release-output.log
            NEXT_VERSION=$(grep -i 'The next release version is' semantic-release-output.log | sed -E 's/.* ([[:digit:].]+)$/\1/')
            if [ -z "${NEXT_VERSION}" ]
            then
              echo "Could not get next tag. Here is the log from semantic-release"
              cat semantic-release-output.log
              exit 1
            fi
            tagFormat=$(node -e "const config=require('./release.config.js'); console.log(config.tagFormat)")
            if [ "${tagFormat}" = "null" ]
            then
              tagFormat="v\${version}"
            fi
            # disabling shellcheck as replace does not work
            # shellcheck disable=SC2001
            NEW_VERSION_TAG=$(echo "$tagFormat" | sed "s/\${version}/$NEXT_VERSION/")
            echo "## VERSION TAG : ${VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
            echo "## NEXT TAG WILL BE : ${NEW_VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
          else
            # Production mode: get next version and create actual tag
            NEXT_VERSION=$($SEMANTIC_RELEASE_CMD | grep -i 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
            tagFormat=$(node -e "const config=require('./release.config.js'); console.log(config.tagFormat)")
            if [ "${tagFormat}" = "null" ]
            then
              tagFormat="v\${version}"
            fi
            # disabling shellcheck as replace does not work
            # shellcheck disable=SC2001
            VERSION_TAG=$(echo "$tagFormat" | sed "s/\${version}/$NEXT_VERSION/")
            echo "## VERSION TAG : ${VERSION_TAG}" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_OUTPUT"
          echo "VERSION_TAG=${VERSION_TAG}" >> "$GITHUB_ENV"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create semantic release tag
        if: ${{ !inputs.dry_run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release

      - name: Get release for editing
        if: ${{ !inputs.dry_run }}
        id: get_release
        # version 1.2.4
        uses: cardinalby/git-get-release-action@5172c3a026600b1d459b117738c605fabc9e4e44
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag: ${{ steps.output_version_tag.outputs.VERSION_TAG }}

      - name: Edit Release
        if: ${{ !inputs.dry_run }}
        # version 1.2.0
        uses: irongut/EditRelease@ccf529ad26dddf9996e7dd0f24ca5da4ea507cc2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ steps.get_release.outputs.id }}
          body: |
            ## Info
            [See code diff](${{ github.event.compare }})
            [Release workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            It was initialized by [${{ github.event.sender.login }}](${{ github.event.sender.html_url }})

      - name: Output Change Set Version
        id: output_change_set_version
        shell: bash
        run: |
          TIMESTAMP=$(date +%s)
          VERSION=$(echo ${{ steps.output_version_tag.outputs.VERSION_TAG }} | tr . -)
          echo CHANGE_SET_VERSION="$VERSION-$TIMESTAMP" >> "$GITHUB_OUTPUT"
